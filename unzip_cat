#!/bin/bash

# about dd:

# https://www.gnu.org/software/coreutils/manual/html_node/dd-invocation.html

#

#################################################

# understanding # #> 
# > file redirects stdout to file
# 1> file redirects stdout to file
#2> file redirects stderr to file
#&> file redirects stdout and stderr to file


# /dev/null is the null device it takes any input you want and throws it away. It can be used to suppress any output.

# Thus 2> /dev/null redirect anyuthing from stderr and ignores it

#################################################

# $((arithmatic expression)) does calculations


# specify various paths and variables etc.
bzippedfile=../zipped_data/enwiki-20170820-pages-articles-multistream.xml.bz2
dir_to_save=../unzipped_data/wiki_cat
start=0
end=0
let n_blocks=0
let count_lines=0
xml_query='/doc/page[not(redirect) and (./ns = 0) and title="Cat"]//text/text()'
index_file=../zipped_data/enwiki-20170820-pages-articles-multistream-index.txt

# make temporary file to store intermediate results
tmpfile=$(mktemp /tmp/cat_temp.XXXXX)
grep -n '.*:Cat$' $index_file | awk 'BEGIN {FS=":";} {if (NF == 4) { print $0; } }'  | sort -n >> $tmpfile

lowest_index=$(head -n 1 < $tmpfile | cut -d : -f 2)
line_number=$(($(tail -n 1 < $tmpfile | cut -d : -f 1) + 100 ))
highest_index=$(sed -n "$line_number p" < $index_file | cut -d : -f 1)
# remove tmp file
rm $tmpfile
# specify where to save output files
outfile=$dir_to_save/cat.xml
# count the offset ie. how many bytes to take out.
let off_set=$highest_index-$lowest_index
# split the .bz2 file as specified by the off-set and start bit
dd if=$bzippedfile of=$outfile.bz2 skip=$lowest_index count=$off_set status='none' iflag=skip_bytes,count_bytes

# recover .bz2 files
bzip2recover $outfile.bz2 2>/dev/null

# decompress .bz2 files
lbzip2 -dc $dir_to_save/cat*.bz2 > $outfile

rm $dir_to_save/*.bz2

# wrap the decompressed blocks by <doc> tag such that the files are xmlstarlet parsable.

sed -i $'1 s/^/<doc>\\\n/' $outfile
echo "</doc>" >> $outfile
# wrap xml_query with "" in order to parse the content, but keep the ''
xmllint --xpath "$xml_query" $outfile | tr "[A-Z]\r\n" "[a-z]  " > ../preprocessed_data/wiki_cat/cat_article.txt

